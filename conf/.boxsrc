#!/usr/bin/env bash
###
# @Author: Cloudflying
# @Date: 2021-12-03 23:41:53
# @LastEditTime: 2024-05-08 23:08:09
# @LastEditors: Cloudflying
# @Description: boxs 初始化文件 仅包含配置文件
###

# 使用 local 定义局部变量
# 使用 export 定义全局变量

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Config System Environment
# Darwin or Linux
if [[ "$(uname -s)" == 'Darwin' ]]; then
  OSTYPE='Darwin'
  OSNAME='Darwin'
elif [[ "$(uname -s)" == 'Linux' ]]; then
  OSTYPE='Linux'
  OSNAME=$(grep '^ID=' /etc/os-release | grep '^ID=' | awk -F '=' '{print $2}')
fi

# Block Notify
if [[ -f '/etc/wsl.conf' ]] || [[ -d /mnt/d ]]; then
  export DONT_PROMPT_WSL_INSTALL=true
fi

# export HOST_IP=$(ifconfig en1 | grep inet | grep -v inet6 | awk -F ' ' '{print $2}')

if [[ "${OSTYPE}" == 'Darwin' ]]; then
  export HOST_IP=$(ifconfig en1 | grep -Eo 'inet\ [0-9]\S+.[0-9]' | sed 's#inet\ ##g')
elif [[ "${OSTYPE}" == 'Linux' ]]; then
  export HOST_IP=$(hostname -i)
fi

# 加载未在 PATH 的目录
[[ -f "${BOXS_HOME}/scripts/bin-env.sh" ]] && source ${BOXS_HOME}/scripts/bin-env.sh

[[ -f ${BOXS_HOME}/scripts/function.sh ]] && source ${BOXS_HOME}/scripts/function.sh
# [ -f ${BOXS_HOME}/scripts/zplug.sh ] && source ${BOXS_HOME}/scripts/zplug.sh
# [ -f ${BOXS_HOME}/scripts/macos-build-env-conf.sh ] && source ${BOXS_HOME}/scripts/macos-build-env-conf.sh

# 加载自定义 aliases
echo "[+] Loading alias"
for aliasf in "${BOXS_HOME}/conf/alias.d"/*.alias; do
  # echo "==> load $aliasf"
  source "$aliasf"
done

# 加载自定义 shell
echo "[+] Loading shell"
for aliasf in "${BOXS_HOME}/libraries/shell"/*.sh; do
  source "${aliasf}"
done

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f "${BOXS_HOME}/conf/.p10k.zsh" ]] && echo "[+] Loading p10k" && source "${BOXS_HOME}/conf/.p10k.zsh"

# [ -d ${BOXS_CONF}/completion/zsh ] && fpath=(${BOXS_CONF}/completion/zsh $fpath)

# Plugins
[ -f ${BOXS_HOME}/scripts/command-not-found.sh ] && source ${BOXS_HOME}/scripts/command-not-found.sh

if [[ -f '/usr/local/bin/brew' ]]; then
  export HOMEBREW_NO_AUTO_UPDATE=true
  export HOMEBREW_NO_ENV_HINTS=true
  export HOMEBREW_API_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"
  export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
  export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
  export HOMEBREW_PIP_INDEX_URL="https://pypi.tuna.tsinghua.edu.cn/simple"
  # aliyun 更新速度慢
  # export HOMEBREW_BOTTLE_DOMAIN="https://pods.xie.ke/homebrew-bottles"
  # export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.cloud.tencent.com/homebrew-bottles/bottles"
  # export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles"
  export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
  # export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles
fi

# export VAGRANT_DEFAULT_PROVIDER=virtualbox
# export VAGRANT_DEFAULT_PROVIDER=libvirt
# export DOCKER_REGISTRY_PREFIX=registry.cn-hongkong.aliyuncs.com/imxieke

# export
export NVIM_HOME="~/.config/nvim"

# fzf
export FZF_DEFAULT_COMMAND='fzf'
export DISABLE_FZF_AUTO_COMPLETION=false
# alway show quote
export ZSH_HACKER_QUOTES_ENABLE_WHEN_INTERACTIVE=true

export SSH_KEY_PATH="${HOME}/.ssh/rsa_id"

# Set Default Editor
if [[ -n $(command -v nvim) ]]; then
  export EDITOR='nvim'
  export VISUAL='nvim'
elif [[ -n $(command -v vim) ]]; then
  export EDITOR='vim'
  export VISUAL='vim'
fi

export CVSEDITOR="${EDITOR}"
export SVN_EDITOR="${EDITOR}"
export GIT_EDITOR="${EDITOR}"

export NVIM_NODE_LOG_FILE="/tmp/nvim_node.log"
export NVIM_PYTHON_LOG_FILE="/tmp/nvim_python.log"

if [[ -n "$(command -v fcitx)" ]]; then
  export GTK_IM_MODULE=fcitx
  export QT_IM_MODULE=fcitx
  export XMODIFIERS=”@im=fcitx”
fi

# Golang env
if [[ -n $(command -v go) ]]; then
  mkdir -p ~/.go/bin     # 包含可执行文件，如：编译器，Go 工具
  mkdir -p ~/.go/src     # 包含源代码构建脚本和标准库的包的完整源代码（Go 是一门开源语言）
  mkdir -p ~/.go/doc     # 包含示例程序，代码工具，本地文档等
  mkdir -p ~/.go/lib     # 包含文档模版
  mkdir -p ~/.go/misc    # 包含与支持 Go 编辑器有关的配置文件以及 cgo 的示例
  mkdir -p ~/.go/os_arch # 包含标准库的包的对象文件（.a）
  mkdir -p ~/.go/cmd     # 包含 Go 和 C 的编译器和命令行脚本
  export GOPATH="${HOME}/.go"
  export GOBIN="${GOPATH}/bin"
  export GOSRC="${GOPATH}/src"
  export PATH="$PATH:$GOBIN"

  # 启用 Go Modules 功能
  export GO111MODULE=on
  # 官网
  # sum.golang.org
  export GOSUMDB=sum.golang.google.cn
  # index.golang.org

  # 配置 GOPROXY 环境变量
  # https://mirrors.cloud.tencent.com/go/
  # https://mirrors.aliyun.com/goproxy/
  # 似乎是官方的 国内也挺快
  # proxy.golang.org
  # https://goproxy.io
  # Qiniu
  # https://goproxy.cn
  # Baidu
  # https://goproxy.bj.bcebos.com
  export GOPROXY=https://goproxy.io,direct
  # 设置不走 proxy 的私有仓库或组，多个用逗号相隔
  # export GOPRIVATE=*.corp.example.com,git.mycompany.com,github.com/my/private
  # export GOSUMDB=gosum.io+ce6e7565+AY5qEHUk/qmHc5btzW45JVoENfazw8LielDsaI+lEbq6
fi

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# quotes 虽然我看不懂 但是不妨碍我装逼
[ -n "$(command -v fortune)" ] && fortune -s | cowsay
